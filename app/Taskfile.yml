version: '3'

# Frontend Application Taskfile
# Handles React/Vite frontend tasks

vars:
  SERVICE_NAME: app
  BUILD_DIR: dist
  CODEARTIFACT_AUTH_TOKEN:
    sh: aws codeartifact get-authorization-token --domain pagaya-artifacts --domain-owner 704102000649 --query authorizationToken --output text

tasks:
  default:
    desc: 'Show available tasks (default command)'
    cmds:
      - task --list

  install:
    desc: 'Install frontend dependencies'
    cmds:
      - yarn install
    env:
      CODEARTIFACT_AUTH_TOKEN: '{{.CODEARTIFACT_AUTH_TOKEN}}'

  deps:
    desc: 'Install Node.js dependencies for frontend'
    deps: [install]

  deps:clean:
    desc: 'Clean install Node.js dependencies'
    cmds:
      - rm -rf node_modules yarn.lock
      - yarn install
    env:
      CODEARTIFACT_AUTH_TOKEN: '{{.CODEARTIFACT_AUTH_TOKEN}}'

  dev:
    desc: 'Start frontend development server'
    cmds:
      - ../scripts/safe-start.sh "Frontend Dev Server" 5174 yarn dev
    env:
      CODEARTIFACT_AUTH_TOKEN: '{{.CODEARTIFACT_AUTH_TOKEN}}'

  dev:timeout:
    desc: 'Start frontend development server with configurable timeout (default: 5s)'
    vars:
      TIMEOUT: '{{.TIMEOUT | default 5}}'
    cmds:
      - gtimeout {{.TIMEOUT}} ../scripts/safe-start.sh "Frontend Dev Server" 5174 yarn dev
    env:
      CODEARTIFACT_AUTH_TOKEN: '{{.CODEARTIFACT_AUTH_TOKEN}}'

  build:
    desc: 'Build frontend for production'
    cmds:
      - yarn build
    env:
      CODEARTIFACT_AUTH_TOKEN: '{{.CODEARTIFACT_AUTH_TOKEN}}'

  preview:
    desc: 'Preview production build'
    cmds:
      - yarn preview
    env:
      CODEARTIFACT_AUTH_TOKEN: '{{.CODEARTIFACT_AUTH_TOKEN}}'

  test:
    desc: 'Run all tests (frontend unit + e2e + web API e2e)'
    cmds:
      - task: test:unit
      # - task: test:e2e

  test:unit:
    desc: 'Run frontend unit tests'
    cmds:
      - yarn test
    env:
      CODEARTIFACT_AUTH_TOKEN: '{{.CODEARTIFACT_AUTH_TOKEN}}'

  test:e2e:
    desc: 'Run Playwright e2e tests (frontend + web API)'
    cmds:
      - yarn test:e2e
    env:
      CODEARTIFACT_AUTH_TOKEN: '{{.CODEARTIFACT_AUTH_TOKEN}}'

  test:e2e:ui:
    desc: 'Run Playwright e2e tests with UI'
    cmds:
      - yarn dlx playwright test --ui
    env:
      CODEARTIFACT_AUTH_TOKEN: '{{.CODEARTIFACT_AUTH_TOKEN}}'

  test:api:
    desc: 'Run Playwright API tests only'
    cmds:
      - yarn test:api
    env:
      CODEARTIFACT_AUTH_TOKEN: '{{.CODEARTIFACT_AUTH_TOKEN}}'

  lint:
    desc: 'Run frontend linting and formatting'
    deps:
      - format
    cmds:
      - yarn lint
    env:
      CODEARTIFACT_AUTH_TOKEN: '{{.CODEARTIFACT_AUTH_TOKEN}}'

  lint:fix:
    desc: 'Fix frontend linting issues'
    cmds:
      - yarn lint:fix
    env:
      CODEARTIFACT_AUTH_TOKEN: '{{.CODEARTIFACT_AUTH_TOKEN}}'

  format:
    desc: 'Format frontend code'
    cmds:
      - yarn format
    env:
      CODEARTIFACT_AUTH_TOKEN: '{{.CODEARTIFACT_AUTH_TOKEN}}'

  clean:
    desc: 'Clean build artifacts for frontend'
    cmds:
      - rm -rf {{.BUILD_DIR}} node_modules/.vite

  doctor:
    desc: 'Check frontend development dependencies (nvm, yarn, and corepack)'
    silent: true
    env:
      CODEARTIFACT_AUTH_TOKEN: '{{.CODEARTIFACT_AUTH_TOKEN}}'
    cmds:
      - |
        if [ -d "$HOME/.nvm" ]; then
          if [ -f "$HOME/.nvm/nvm.sh" ]; then
            source "$HOME/.nvm/nvm.sh" && echo "✅ nvm is installed ($(nvm --version))"
          else
            echo "✅ nvm is installed (nvm.sh not accessible)"
          fi
        else
          echo "❌ nvm is not installed"
          echo "   Install nvm: https://github.com/nvm-sh/nvm#installing-and-updating"
        fi
      - |
        if command -v yarn >/dev/null 2>&1; then
          YARN_VERSION=$(CODEARTIFACT_AUTH_TOKEN="{{.CODEARTIFACT_AUTH_TOKEN}}" yarn --version 2>/dev/null || echo "version check failed")
          echo "✅ yarn is installed ($YARN_VERSION)"
        else
          echo "❌ yarn is not installed or not in PATH"
          echo "   Install yarn: npm install -g yarn"
        fi
      - |
        if command -v corepack >/dev/null 2>&1; then
          COREPACK_VERSION=$(corepack --version 2>/dev/null || echo "version check failed")
          echo "✅ corepack is available ($COREPACK_VERSION)"
          # Check if corepack is enabled by looking for the shims
          if command -v yarnpkg >/dev/null 2>&1 || command -v pnpm >/dev/null 2>&1; then
            echo "✅ corepack is enabled"
          else
            echo "⚠️  corepack is available but not enabled"
            echo "   Run: corepack enable"
          fi
        else
          echo "❌ corepack is not available"
          echo "   Corepack comes bundled with Node.js 14.19.0+ (up to v25)"
          echo "   Update Node.js or install corepack: npm install -g corepack"
        fi
