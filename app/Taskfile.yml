version: "3"

# Frontend Application Taskfile
# Handles React/Vite frontend tasks

vars:
  SERVICE_NAME: app
  BUILD_DIR: dist
  CODEARTIFACT_AUTH_TOKEN:
    sh: aws codeartifact get-authorization-token --domain pagaya-artifacts --domain-owner 704102000649 --query authorizationToken --output text

tasks:
  default:
    desc: "Show available tasks (default command)"
    cmds:
      - task --list

  install:
    desc: "Install frontend dependencies"
    cmds:
      - echo "üì¶ Installing frontend dependencies..."
      - yarn install
    env:
      CODEARTIFACT_AUTH_TOKEN: "{{.CODEARTIFACT_AUTH_TOKEN}}"

  deps:
    desc: "Install Node.js dependencies for frontend"
    deps: [install]
    cmds:
      - echo "üì¶ Dependencies already installed via install task"

  deps:clean:
    desc: "Clean install Node.js dependencies"
    cmds:
      - echo "üßπ Clean installing frontend dependencies..."
      - rm -rf node_modules yarn.lock
      - yarn install
    env:
      CODEARTIFACT_AUTH_TOKEN: "{{.CODEARTIFACT_AUTH_TOKEN}}"

  dev:
    desc: "Start frontend development server"
    cmds:
      - echo "üöÄ Starting frontend development server..."
      - yarn dev
    env:
      CODEARTIFACT_AUTH_TOKEN: "{{.CODEARTIFACT_AUTH_TOKEN}}"

  build:
    desc: "Build frontend for production"
    cmds:
      - echo "üèóÔ∏è Building frontend..."
      - yarn build
    env:
      CODEARTIFACT_AUTH_TOKEN: "{{.CODEARTIFACT_AUTH_TOKEN}}"

  preview:
    desc: "Preview production build"
    cmds:
      - echo "üëÄ Previewing production build..."
      - yarn preview
    env:
      CODEARTIFACT_AUTH_TOKEN: "{{.CODEARTIFACT_AUTH_TOKEN}}"

  test:
    desc: "Run all tests (frontend unit + e2e + web API e2e)"
    cmds:
      - task: test:unit
      - task: test:e2e

  test:unit:
    desc: "Run frontend unit tests"
    cmds:
      - echo "üß™ Running frontend unit tests..."
      - yarn test
    env:
      CODEARTIFACT_AUTH_TOKEN: "{{.CODEARTIFACT_AUTH_TOKEN}}"

  test:e2e:
    desc: "Run Playwright e2e tests (frontend + web API)"
    cmds:
      - echo "üß™ Running all e2e tests (frontend + web API)..."
      - yarn test:e2e
    env:
      CODEARTIFACT_AUTH_TOKEN: "{{.CODEARTIFACT_AUTH_TOKEN}}"

  test:e2e:ui:
    desc: "Run Playwright e2e tests with UI"
    cmds:
      - echo "üß™ Running e2e tests with UI..."
      - yarn dlx playwright test --ui
    env:
      CODEARTIFACT_AUTH_TOKEN: "{{.CODEARTIFACT_AUTH_TOKEN}}"

  test:api:
    desc: "Run Playwright API tests only"
    cmds:
      - echo "üß™ Running API tests..."
      - yarn test:api
    env:
      CODEARTIFACT_AUTH_TOKEN: "{{.CODEARTIFACT_AUTH_TOKEN}}"

  lint:
    desc: "Run frontend linting and formatting"
    cmds:
      - echo "üîç Linting frontend..."
      - yarn lint
    env:
      CODEARTIFACT_AUTH_TOKEN: "{{.CODEARTIFACT_AUTH_TOKEN}}"

  lint:fix:
    desc: "Fix frontend linting issues"
    cmds:
      - echo "üîß Fixing frontend lint issues..."
      - yarn lint:fix
    env:
      CODEARTIFACT_AUTH_TOKEN: "{{.CODEARTIFACT_AUTH_TOKEN}}"

  format:
    desc: "Format frontend code"
    cmds:
      - echo "‚ú® Formatting frontend code..."
      - yarn format
    env:
      CODEARTIFACT_AUTH_TOKEN: "{{.CODEARTIFACT_AUTH_TOKEN}}"

  clean:
    desc: "Clean build artifacts for frontend"
    cmds:
      - echo "üßπ Cleaning frontend artifacts..."
      - rm -rf {{.BUILD_DIR}} node_modules/.vite

  doctor:
    desc: "Check frontend development dependencies (nvm, yarn, and corepack)"
    silent: true
    env:
      CODEARTIFACT_AUTH_TOKEN: "{{.CODEARTIFACT_AUTH_TOKEN}}"
    cmds:
      - echo "üîç Checking frontend dependencies..."
      - |
        if [ -d "$HOME/.nvm" ]; then
          if [ -f "$HOME/.nvm/nvm.sh" ]; then
            source "$HOME/.nvm/nvm.sh" && echo "‚úÖ nvm is installed ($(nvm --version))"
          else
            echo "‚úÖ nvm is installed (nvm.sh not accessible)"
          fi
        else
          echo "‚ùå nvm is not installed"
          echo "   Install nvm: https://github.com/nvm-sh/nvm#installing-and-updating"
        fi
      - |
        if command -v yarn >/dev/null 2>&1; then
          YARN_VERSION=$(CODEARTIFACT_AUTH_TOKEN="{{.CODEARTIFACT_AUTH_TOKEN}}" yarn --version 2>/dev/null || echo "version check failed")
          echo "‚úÖ yarn is installed ($YARN_VERSION)"
        else
          echo "‚ùå yarn is not installed or not in PATH"
          echo "   Install yarn: npm install -g yarn"
        fi
      - |
        if command -v corepack >/dev/null 2>&1; then
          COREPACK_VERSION=$(corepack --version 2>/dev/null || echo "version check failed")
          echo "‚úÖ corepack is available ($COREPACK_VERSION)"
          # Check if corepack is enabled by looking for the shims
          if command -v yarnpkg >/dev/null 2>&1 || command -v pnpm >/dev/null 2>&1; then
            echo "‚úÖ corepack is enabled"
          else
            echo "‚ö†Ô∏è  corepack is available but not enabled"
            echo "   Run: corepack enable"
          fi
        else
          echo "‚ùå corepack is not available"
          echo "   Corepack comes bundled with Node.js 14.19.0+ (up to v25)"
          echo "   Update Node.js or install corepack: npm install -g corepack"
        fi

