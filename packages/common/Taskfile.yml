version: "3"

# Common Package Taskfile
# Handles shared library tasks

vars:
  SERVICE_NAME: common
  PYTHON_SRC: common
  TESTS_DIR: tests

tasks:
  default:
    desc: "Show available tasks (default command)"
    cmds:
      - task --list

  deps:
    desc: "Install dependencies for common package"
    cmds:
      - echo "üì¶ Installing dependencies for {{.SERVICE_NAME}}..."
      - uv sync

  deps:dev:
    desc: "Install development dependencies for common package"
    cmds:
      - echo "üîß Installing development dependencies for {{.SERVICE_NAME}}..."
      - uv sync --extra dev

  sync:
    desc: "Sync exact dependencies from lock files"
    cmds:
      - echo "üîí Syncing dependencies for {{.SERVICE_NAME}}..."
      - uv sync --frozen

  sync:dev:
    desc: "Sync exact development dependencies from lock files"
    cmds:
      - echo "üîí Syncing development dependencies for {{.SERVICE_NAME}}..."
      - uv sync --frozen --extra dev

  test:
    desc: "Run tests for common package"
    cmds:
      - echo "üß™ Testing {{.SERVICE_NAME}}..."
      - uv sync --extra dev
      - uv run pytest {{.TESTS_DIR}}/ -v
    status:
      - test -d {{.TESTS_DIR}}

  test:unit:
    desc: "Run unit tests for common package"
    cmds:
      - task: test

  lint:
    desc: "Run linting and formatting for common package"
    cmds:
      - echo "üîç Linting {{.SERVICE_NAME}}..."
      - uv sync --extra dev
      - uv run ruff check {{.PYTHON_SRC}} --fix
      - uv run ruff format {{.PYTHON_SRC}}

  lint:check:
    desc: "Check linting without fixing"
    cmds:
      - echo "üîç Checking lint for {{.SERVICE_NAME}}..."
      - uv sync --extra dev
      - uv run ruff check {{.PYTHON_SRC}} --diff
      - uv run ruff format {{.PYTHON_SRC}} --diff

  format:
    desc: "Format code only"
    cmds:
      - echo "üé® Formatting {{.SERVICE_NAME}}..."
      - uv sync --extra dev
      - uv run ruff format {{.PYTHON_SRC}}

  build:
    desc: "Build common package"
    cmds:
      - echo "üèóÔ∏è Building {{.SERVICE_NAME}} package..."
      - uv build

  clean:
    desc: "Clean build artifacts for common"
    cmds:
      - echo "üßπ Cleaning {{.SERVICE_NAME}} artifacts..."
      - rm -rf dist/ build/ .pytest_cache/
      - find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true

  dev:install:
    desc: "Install common package in development mode"
    cmds:
      - echo "üîß Installing {{.SERVICE_NAME}} in development mode..."
      - uv sync

  doctor:
    desc: "Check Python development dependencies (uv)"
    silent: true
    cmds:
      - echo "üîç Checking Python dependencies..."
      - |
        if command -v uv >/dev/null 2>&1; then
          UV_VERSION=$(uv --version)
          echo "‚úÖ uv is installed ($UV_VERSION)"
        else
          echo "‚ùå uv is not installed or not in PATH"
          echo "   Install uv: https://docs.astral.sh/uv/getting-started/installation/"
        fi

