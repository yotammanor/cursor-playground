version: "3"

# Task Management Application - Main Taskfile
# This file orchestrates development, testing, building, and deployment tasks
# using composition of individual service Taskfiles

includes:
  api:
    taskfile: ./services/api/Taskfile.yml
    dir: ./services/api
    internal: true
  worker:
    taskfile: ./services/worker/Taskfile.yml
    dir: ./services/worker
    internal: true
  common:
    taskfile: ./packages/common/Taskfile.yml
    dir: ./packages/common
    internal: true
  app:
    internal: true
    taskfile: ./app/Taskfile.yml
    dir: ./app


tasks:
  # === Setup Tasks ===
  setup:
    desc: "Set up the entire development environment (includes dev dependencies)"
    aliases: [install]
    cmds:
      - task: python:deps:dev
      - task: app:deps

  # === Development Tasks ===
  dev:
    desc: "Start all services for local development"
    deps: [setup, api:dev, worker:dev, app:dev]

  # === Testing Tasks ===
  test:
    desc: "Run all tests (unit + e2e)"
    aliases: [tests]
    cmds:
      - task: python:test
      - task: app:test

  test:parallel:
    desc: "Run all tests in parallel for faster execution"
    aliases: [tests:parallel]
    cmds:
      - task: python:test:parallel
      - task: app:test

  # === Linting Tasks ===
  lint:
    desc: "Run all linters and formatters"
    deps: [python:lint, app:lint]

  lint:check:
    desc: "Check all linting without fixing"
    cmds:
      - task: python:lint:check
      - task: app:lint

  format:
    desc: "Format all code"
    cmds:
      - task: python:format
      - task: app:format

  # === Build Tasks ===
  build:
    desc: "Build all services and frontend (production dependencies only)"
    cmds:
      - task: python:build:prod
      - task: app:build

  # === Utility Tasks ===
  doctor:
    desc: "Check for required development dependencies"
    silent: true
    cmds:
      - |
        if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
          echo "✅ Network connectivity is working"
        else
          echo "❌ No network connectivity detected"
        fi
      - |
        if scutil --nc status "Cato Networks VPN" | grep -q "^Connected"; then
          echo "✅ Cato VPN is active"
        else
          echo "⚠️  Cato VPN is not active"
        fi
      - |
        AWS_ERROR=$(aws sts get-caller-identity 2>&1)
        if [ $? -eq 0 ]; then
          AWS_ACCOUNT=$(echo "$AWS_ERROR" | jq -r '.Account' 2>/dev/null)
          AWS_ARN=$(echo "$AWS_ERROR" | jq -r '.Arn' 2>/dev/null)
          echo "✅ AWS credentials are valid (Account: $AWS_ACCOUNT)"
          
          # Check if the assumed role contains Hive-Eng-Dev (works for both SSO and direct role assumption)
          if echo "$AWS_ARN" | grep -q "Hive-Eng-Dev"; then
            echo "✅ Using Hive-Eng-Dev role via AWS SSO"
          else
            echo "❌ Not using Hive-Eng-Dev role"
            echo "   Current role: $AWS_ARN"
            echo "   Expected role to contain: Hive-Eng-Dev"
          fi
        else
          if echo "$AWS_ERROR" | grep -q "ExpiredTokenException\|expired"; then
            echo "❌ AWS credentials are expired"
            echo "   Run: aws sso login"
          elif echo "$AWS_ERROR" | grep -q "UnauthorizedOperation\|AccessDenied"; then
            echo "❌ AWS credentials are unauthorized"
            echo "   Check your AWS permissions"
          else
            echo "❌ AWS credentials are invalid or not configured"
            echo "   Run: aws configure or aws sso login"
          fi
        fi
      - task: app:doctor
      - task: common:doctor
      - |
        if command -v git >/dev/null 2>&1; then
          GIT_VERSION=$(git --version)
          echo "✅ git is installed ($GIT_VERSION)"
        else
          echo "❌ git is not installed or not in PATH"
          echo "   Install git: https://git-scm.com/downloads"
        fi
      - |
        if command -v aws >/dev/null 2>&1; then
          AWS_VERSION=$(aws --version)
          echo "✅ awscli is installed ($AWS_VERSION)"
        else
          echo "❌ awscli is not installed or not in PATH"
          echo "   Install awscli: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"
        fi
      - |
        if [ "$SHELL" = "/bin/zsh" ] || [ "$0" = "zsh" ] || [ "$(basename $SHELL)" = "zsh" ]; then
          ZSH_VERSION=$(zsh --version 2>/dev/null | head -n1 || echo "version check failed")
          echo "✅ zsh is the current shell ($ZSH_VERSION)"
        else
          echo "⚠️  zsh is not the current shell (current: $SHELL)"
          echo "   Consider switching to zsh for better development experience"
        fi

  clean:
    desc: "Clean build artifacts and caches"
    cmds:
      - task: common:clean
      - task: api:clean
      - task: worker:clean
      - task: app:clean
      - rm -rf dist/ build/ coverage/

  default:
    desc: "Show available tasks (default command)"
    cmds:
      - task --list

  help:
    desc: "Show available tasks"
    cmds:
      - task --list
  # === Internal Python Tasks (not exposed to users) ===
  python:deps:
    desc: "Install Python dependencies for all services (production only)"
    internal: true
    cmds:
      - task: common:deps
      - task: api:deps
      - task: worker:deps

  python:deps:dev:
    desc: "Install Python dependencies for all services (including dev dependencies)"
    internal: true
    cmds:
      - task: common:deps:dev
      - task: api:deps:dev
      - task: worker:deps:dev

  python:test:
    desc: "Run Python tests for all services"
    internal: true
    cmds:
      - task: common:test
      - task: api:test
      - task: worker:test

  python:lint:
    desc: "Run Python linting and formatting"
    internal: true
    deps: [common:lint, api:lint, worker:lint]

  python:lint:check:
    desc: "Check Python linting without fixing"
    internal: true
    cmds:
      - task: common:lint:check
      - task: api:lint:check
      - task: worker:lint:check

  python:format:
    desc: "Format Python code only"
    internal: true
    cmds:
      - task: common:format
      - task: api:format
      - task: worker:format

  python:build:
    desc: "Build Python packages (production dependencies only)"
    internal: true
    cmds:
      - task: common:build
      - task: api:build
      - task: worker:build

  python:build:prod:
    desc: "Build Python packages (production dependencies only)"
    internal: true
    cmds:
      - task: common:build
      - task: api:build
      - task: worker:build

  python:test:parallel:
    desc: "Run Python tests for all services in parallel"
    internal: true
    cmds:
      - task: common:test
      - task: api:test
      - task: worker:test

