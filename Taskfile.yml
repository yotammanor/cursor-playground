version: "3"

# Task Management Application - Main Taskfile
# This file orchestrates development, testing, building, and deployment tasks
# using composition of individual service Taskfiles

includes:
  web-api:
    taskfile: ./services/web-api/Taskfile.yml
    dir: ./services/web-api
    internal: true
  worker:
    taskfile: ./services/worker/Taskfile.yml
    dir: ./services/worker
    internal: true
  common:
    taskfile: ./packages/common/Taskfile.yml
    dir: ./packages/common
    internal: true
  app:
    internal: true
    taskfile: ./app/Taskfile.yml
    dir: ./app


tasks:
  # === Setup Tasks ===
  setup:
    desc: "Set up the entire development environment"
    cmds:
      - task: python:deps
      - task: app:deps
      - echo "‚úÖ Development environment setup complete"

  # === Development Tasks ===
  dev:
    desc: "Start all services for local development"
    deps: [setup]
    cmds:
      - echo "üöÄ Starting development environment..."
      - echo "Run 'task web-api:run' and 'task worker:run' in separate terminals"
      - echo "Run 'task app:dev' for frontend development server"
      - echo "TODO - Implement parallel startup of all services"

  # === Testing Tasks ===
  test:
    desc: "Run all tests (unit + e2e)"
    aliases: [tests]
    cmds:
      - task: python:test
      - task: app:test
      - echo "‚úÖ All tests completed"

  # === Linting Tasks ===
  lint:
    desc: "Run all linters and formatters"
    cmds:
      - task: python:lint
      - task: app:lint
      - echo "‚úÖ All linting completed"

  lint:check:
    desc: "Check all linting without fixing"
    cmds:
      - task: python:lint:check
      - task: app:lint
      - echo "‚úÖ All linting checks completed"

  format:
    desc: "Format all code"
    cmds:
      - task: python:format
      - task: app:lint
      - echo "‚úÖ All formatting completed"

  # === Build Tasks ===
  build:
    desc: "Build all services and frontend"
    cmds:
      - task: python:build
      - task: app:build
      - echo "‚úÖ All builds completed"

  # === Utility Tasks ===
  doctor:
    desc: "Check for required development dependencies"
    silent: true
    cmds:
      - echo "üîç Checking development dependencies..."
      - task: app:doctor
      - task: common:doctor
      - |
        if command -v aws >/dev/null 2>&1; then
          AWS_VERSION=$(aws --version)
          echo "‚úÖ awscli is installed ($AWS_VERSION)"
        else
          echo "‚ùå awscli is not installed or not in PATH"
          echo "   Install awscli: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"
        fi
      - |
        if [ "$SHELL" = "/bin/zsh" ] || [ "$0" = "zsh" ] || [ "$(basename $SHELL)" = "zsh" ]; then
          ZSH_VERSION=$(zsh --version 2>/dev/null | head -n1 || echo "version check failed")
          echo "‚úÖ zsh is the current shell ($ZSH_VERSION)"
        else
          echo "‚ö†Ô∏è  zsh is not the current shell (current: $SHELL)"
          echo "   Consider switching to zsh for better development experience"
        fi
      - echo "üè• Doctor check completed"

  clean:
    desc: "Clean build artifacts and caches"
    cmds:
      - echo "üßπ Cleaning build artifacts..."
      - task: common:clean
      - task: web-api:clean
      - task: worker:clean
      - task: app:clean
      - rm -rf dist/ build/ coverage/
      - echo "‚úÖ Clean completed"

  default:
    desc: "Show available tasks (default command)"
    cmds:
      - task --list

  help:
    desc: "Show available tasks"
    cmds:
      - task --list
  # === Internal Python Tasks (not exposed to users) ===
  python:deps:
    desc: "Install Python dependencies for all services"
    internal: true
    cmds:
      - task: common:deps
      - task: web-api:deps
      - task: worker:deps

  python:test:
    desc: "Run Python tests for all services"
    internal: true
    cmds:
      - task: common:test
      - task: web-api:test
      - task: worker:test

  python:lint:
    desc: "Run Python linting and formatting"
    internal: true
    cmds:
      - task: common:lint
      - task: web-api:lint
      - task: worker:lint

  python:lint:check:
    desc: "Check Python linting without fixing"
    internal: true
    cmds:
      - task: common:lint:check
      - task: web-api:lint:check
      - task: worker:lint:check

  python:format:
    desc: "Format Python code only"
    internal: true
    cmds:
      - echo "üé® Formatting Python code..."
      - task: common:format
      - task: web-api:format
      - task: worker:format

  python:build:
    desc: "Build Python packages"
    internal: true
    cmds:
      - task: common:build
      - task: web-api:build
      - task: worker:build

